// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSGM.Model.DbStorage;

#nullable disable

namespace PSGM.Model.DbStorage.Migrations
{
    [DbContext(typeof(DbStorage_Context))]
    [Migration("20240922150159_InitialeCreate")]
    partial class InitialeCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("psgm")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<Guid>("DeviceIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("DeviceIdExt");

                    b.Property<string>("ExtId1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId1");

                    b.Property<string>("ExtId10")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId10");

                    b.Property<string>("ExtId2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId2");

                    b.Property<string>("ExtId3")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId3");

                    b.Property<string>("ExtId4")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId4");

                    b.Property<string>("ExtId5")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId5");

                    b.Property<string>("ExtId6")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId6");

                    b.Property<string>("ExtId7")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId7");

                    b.Property<string>("ExtId8")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId8");

                    b.Property<string>("ExtId9")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId9");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("MachineIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("MachineIdExt");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("ObjectExtension")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectExtension");

                    b.Property<long>("ObjectSize")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectSize");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<string>("RawFileIdsString")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("RawFileIdsString");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("StorageObjectName")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectName");

                    b.Property<string>("StorageObjectUrl")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrl");

                    b.Property<string>("StorageObjectUrlPublic")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrlPublic");

                    b.Property<int>("StorageObjectVersion")
                        .HasColumnType("integer")
                        .HasColumnName("StorageObjectVersion");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("File", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Authorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Authorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Authorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("FileId");

                    b.ToTable("File_Authorization_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Authorization_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Authorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserId");

                    b.HasIndex("FileId");

                    b.ToTable("File_Authorization_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Authorization_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("ApplicableForFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("ApplicableForFiles");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<int>("MetadataPermissions")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataPermissions");

                    b.Property<int>("MetadataType")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataType");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Authorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Authorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Authorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("MetadataId");

                    b.ToTable("File_Metadata_Authorization_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Authorization_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Authorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserId");

                    b.HasIndex("MetadataId");

                    b.ToTable("File_Metadata_Authorization_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Authorization_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MetadataId");

                    b.ToTable("File_Metadata_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("File_Notification_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("File_Notification_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Notification_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationUserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("NotificationUserGroupId");

                    b.ToTable("File_Notification_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Notification_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Notification_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("NotificationUserId");

                    b.ToTable("File_Notification_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Notification_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("QrCodeType")
                        .HasColumnType("integer")
                        .HasColumnName("QrCodeType");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("File_QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("QualityState")
                        .HasColumnType("integer")
                        .HasColumnName("QualityState");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("File_Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_Quality_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<int>("DirectoryObjectsAutofill")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<int>("DirectoryState")
                        .HasColumnType("integer")
                        .HasColumnName("DirectoryState");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Authorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Authorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Authorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_Authorization_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Authorization_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Authorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_Authorization_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Authorization_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("ApplicableForFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("ApplicableForFiles");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<int>("MetadataPermissions")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataPermissions");

                    b.Property<int>("MetadataType")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataType");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Authorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Authorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Authorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("MetadataId");

                    b.ToTable("RootDirectory_Metadata_Authorization_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Authorization_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Authorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserId");

                    b.HasIndex("MetadataId");

                    b.ToTable("RootDirectory_Metadata_Authorization_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Authorization_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_Metadata_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Notification_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Notification_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Notification_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("NotificationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationUserGroupId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_Notification_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Notification_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Notification_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("NotificationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationUserId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_Notification_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Notification_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("QrCodeType")
                        .HasColumnType("integer")
                        .HasColumnName("QrCodeType");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.ToTable("RootDirectory_QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("QualityState")
                        .HasColumnType("integer")
                        .HasColumnName("QualityState");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.ToTable("RootDirectory_Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Quality_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<int>("DirectoryObjectsAutofill")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<int>("DirectoryState")
                        .HasColumnType("integer")
                        .HasColumnName("DirectoryState");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<Guid?>("ParentSubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubDirectoryId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("SubDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Authorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Authorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Authorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_Authorization_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Authorization_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Authorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("Authorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Authorization_UserId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_Authorization_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Authorization_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("ApplicableForFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("ApplicableForFiles");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<int>("MetadataPermissions")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataPermissions");

                    b.Property<int>("MetadataType")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataType");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Authorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Authorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Authorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("MetadataId");

                    b.ToTable("SubDirectory_Metadata_Authorization_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Authorization_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Authorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserId");

                    b.HasIndex("MetadataId");

                    b.ToTable("SubDirectory_Metadata_Authorization_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Authorization_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_Metadata_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Notification_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Notification_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Notification_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("NotificationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationUserGroupId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_Notification_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Notification_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Notification_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("NotificationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationUserId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_Notification_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Notification_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("QrCodeType")
                        .HasColumnType("integer")
                        .HasColumnName("QrCodeType");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId")
                        .IsUnique();

                    b.ToTable("SubDirectory_QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("QualityState")
                        .HasColumnType("integer")
                        .HasColumnName("QualityState");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId")
                        .IsUnique();

                    b.ToTable("SubDirectory_Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_QualityAuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Files")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Files")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("RootDirectory");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup", "AuthorizationUserGroup")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("FileId");

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Authorization_User", "AuthorizationUser")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("AuthorizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("FileId");

                    b.Navigation("AuthorizationUser");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup", "AuthorizationUserGroup")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Metadata", "Metadata")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("MetadataId");

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User", "AuthorizationUser")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("AuthorizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Metadata", "Metadata")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("MetadataId");

                    b.Navigation("AuthorizationUser");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Metadata", "Metadata")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("NotificationUserGroupLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup", "NotificationUserGroup")
                        .WithMany("NotificationUserGroupLinks")
                        .HasForeignKey("NotificationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("NotificationUserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Notification_User", "NotificationUser")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("NotificationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("NotificationUser");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_QrCode", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_Quality", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup", "AuthorizationUserGroup")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User", "AuthorizationUser")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("AuthorizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("AuthorizationUser");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup", "AuthorizationUserGroup")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", "Metadata")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("MetadataId")
                        .HasConstraintName("FK_RootDirectory_Metadata_Authorization_UserGroup_Link_RootDi~1");

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User", "AuthorizationUser")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("AuthorizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", "Metadata")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("MetadataId")
                        .HasConstraintName("FK_RootDirectory_Metadata_Authorization_User_Link_RootDirecto~1");

                    b.Navigation("AuthorizationUser");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", "Metadata")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("Metadata");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup", "NotificationUserGroup")
                        .WithMany("NotificationUserGroupLinks")
                        .HasForeignKey("NotificationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("NotificationUserGroupLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("NotificationUserGroup");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User", "NotificationUser")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("NotificationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("NotificationUser");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode", "RootDirectoryId");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality", "RootDirectoryId");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "ParentSubDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("ParentSubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("ParentSubDirectory");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup", "AuthorizationUserGroup")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User", "AuthorizationUser")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("Authorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("AuthorizationUser");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup", "AuthorizationUserGroup")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", "Metadata")
                        .WithMany("AuthorizationUserGroupLinks")
                        .HasForeignKey("MetadataId")
                        .HasConstraintName("FK_SubDirectory_Metadata_Authorization_UserGroup_Link_SubDire~1");

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User", "AuthorizationUser")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("AuthorizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", "Metadata")
                        .WithMany("AuthorizationUserLinks")
                        .HasForeignKey("MetadataId")
                        .HasConstraintName("FK_SubDirectory_Metadata_Authorization_User_Link_SubDirectory~1");

                    b.Navigation("AuthorizationUser");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", "Metadata")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("Metadata");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup", "NotificationUserGroup")
                        .WithMany("NotificationUserGroupLinks")
                        .HasForeignKey("NotificationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Notification_UserGroupLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("NotificationUserGroup");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User", "NotificationUser")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("NotificationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Notification_UserLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("NotificationUser");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode", "SubDirectoryId");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality", "SubDirectoryId");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");

                    b.Navigation("AuthorizationUserLinks");

                    b.Navigation("MetadataLinks");

                    b.Navigation("NotificationUserGroupLinks");

                    b.Navigation("NotificationUserLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_User", b =>
                {
                    b.Navigation("AuthorizationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Authorization_UserGroup", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");

                    b.Navigation("AuthorizationUserLinks");

                    b.Navigation("MetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_User", b =>
                {
                    b.Navigation("AuthorizationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Authorization_UserGroup", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_User", b =>
                {
                    b.Navigation("NotificationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Notification_UserGroup", b =>
                {
                    b.Navigation("NotificationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");

                    b.Navigation("AuthorizationUserLinks");

                    b.Navigation("Files");

                    b.Navigation("MetadataLinks");

                    b.Navigation("NotificationUserGroupLinks");

                    b.Navigation("NotificationUserLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("SubDirectories");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_User", b =>
                {
                    b.Navigation("AuthorizationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Authorization_UserGroup", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");

                    b.Navigation("AuthorizationUserLinks");

                    b.Navigation("MetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_User", b =>
                {
                    b.Navigation("AuthorizationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Authorization_UserGroup", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_User", b =>
                {
                    b.Navigation("NotificationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Notification_UserGroup", b =>
                {
                    b.Navigation("NotificationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("Files");

                    b.Navigation("MetadataLinks");

                    b.Navigation("Notification_UserGroupLinks");

                    b.Navigation("Notification_UserLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("SubDirectories");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_User", b =>
                {
                    b.Navigation("AuthorizationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Authorization_UserGroup", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");

                    b.Navigation("AuthorizationUserLinks");

                    b.Navigation("MetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_User", b =>
                {
                    b.Navigation("AuthorizationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Authorization_UserGroup", b =>
                {
                    b.Navigation("AuthorizationUserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_User", b =>
                {
                    b.Navigation("NotificationUserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Notification_UserGroup", b =>
                {
                    b.Navigation("NotificationUserGroupLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
