// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSGM.Model.DbStorage;

#nullable disable

namespace PSGM.Model.DbStorage.Migrations
{
    [DbContext(typeof(DbStorage_Context))]
    partial class DbStorage_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("psgm")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationUserGroupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserGroupIdsExtString");

                    b.Property<string>("AuthorizationUserIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserIdsExtString");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("DeviceIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("DeviceIdExt");

                    b.Property<string>("ExtId1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId1");

                    b.Property<string>("ExtId10")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId10");

                    b.Property<string>("ExtId2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId2");

                    b.Property<string>("ExtId3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId3");

                    b.Property<string>("ExtId4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId4");

                    b.Property<string>("ExtId5")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId5");

                    b.Property<string>("ExtId6")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId6");

                    b.Property<string>("ExtId7")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId7");

                    b.Property<string>("ExtId8")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId8");

                    b.Property<string>("ExtId9")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ExtId9");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("MachineIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("MachineIdExt");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NotificationUserGroupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("NotificationUserGroupIdsExtString");

                    b.Property<string>("NotificationUserIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("NotificationUserIdsExtString");

                    b.Property<long>("ObjectExtension")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectExtension");

                    b.Property<string>("ObjectMetadataString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("ObjectMetadataString");

                    b.Property<long>("ObjectSize")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectSize");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("RawFileIdsString")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("RawFileIdsString");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("StorageObjectName")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectName");

                    b.Property<string>("StorageObjectUrl")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrl");

                    b.Property<string>("StorageObjectUrlPublic")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrlPublic");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("File", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationUserGroupsString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserGroupsString");

                    b.Property<string>("AuthorizationUsersString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUsersString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("EditAll")
                        .HasColumnType("boolean")
                        .HasColumnName("EditAll");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.Property<bool>("ViewAll")
                        .HasColumnType("boolean")
                        .HasColumnName("ViewAll");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FileMetadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("FileMetadataLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationUserGroupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserGroupIdsExtString");

                    b.Property<string>("AuthorizationUserIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserIdsExtString");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<long>("DirectoryObjectsAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NotificationUserGroupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("NotificationUserGroupIdsExtString");

                    b.Property<string>("NotificationUserIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("NotificationUserIdsExtString");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationUserGroupsString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserGroupsString");

                    b.Property<string>("AuthorizationUsersString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUsersString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("EditAll")
                        .HasColumnType("boolean")
                        .HasColumnName("EditAll");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.Property<bool>("ViewAll")
                        .HasColumnType("boolean")
                        .HasColumnName("ViewAll");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectoryMetadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("RootDirectoryMetadataId");

                    b.ToTable("RootDirectoryMetadataLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationUserGroupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserGroupIdsExtString");

                    b.Property<string>("AuthorizationUserIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserIdsExtString");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<long>("DirectoryObjectsAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NotificationUserGroupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("NotificationUserGroupIdsExtString");

                    b.Property<string>("NotificationUserIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("NotificationUserIdsExtString");

                    b.Property<Guid?>("ParentSubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubDirectoryId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("SubDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationUserGroupsString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUserGroupsString");

                    b.Property<string>("AuthorizationUsersString")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("AuthorizationUsersString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("EditAll")
                        .HasColumnType("boolean")
                        .HasColumnName("EditAll");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.Property<bool>("ViewAll")
                        .HasColumnType("boolean")
                        .HasColumnName("ViewAll");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectoryMetadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.HasIndex("SubDirectoryMetadataId");

                    b.ToTable("SubDirectoryMetadataLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Files")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Files")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("RootDirectory");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("FileMetadataLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileMetadata", "FileMetadata")
                        .WithMany("FileMetadataLinks")
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_QrCode", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany()
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("RootDirectoryMetadataLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", "RootDirectoryMetadata")
                        .WithMany("RootDirectoryMetadataLinks")
                        .HasForeignKey("RootDirectoryMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootDirectory");

                    b.Navigation("RootDirectoryMetadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "ParentSubDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("ParentSubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("ParentSubDirectory");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany()
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("SubDirectoryMetadataLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", "SubDirectoryMetadata")
                        .WithMany("SubDirectoryMetadataLinks")
                        .HasForeignKey("SubDirectoryMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDirectory");

                    b.Navigation("SubDirectoryMetadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Navigation("FileMetadataLinks");

                    b.Navigation("QrCode");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata", b =>
                {
                    b.Navigation("FileMetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("RootDirectoryMetadataLinks");

                    b.Navigation("SubDirectories");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", b =>
                {
                    b.Navigation("RootDirectoryMetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SubDirectories");

                    b.Navigation("SubDirectoryMetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", b =>
                {
                    b.Navigation("SubDirectoryMetadataLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
