// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSGM.Model.DbStorage;

#nullable disable

namespace PSGM.Model.DbStorage.Migrations
{
    [DbContext(typeof(DbStorage_Context))]
    [Migration("20240918160131_InitialeCreate")]
    partial class InitialeCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("psgm")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<Guid>("DeviceIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("DeviceIdExt");

                    b.Property<string>("ExtId1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId1");

                    b.Property<string>("ExtId10")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId10");

                    b.Property<string>("ExtId2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId2");

                    b.Property<string>("ExtId3")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId3");

                    b.Property<string>("ExtId4")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId4");

                    b.Property<string>("ExtId5")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId5");

                    b.Property<string>("ExtId6")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId6");

                    b.Property<string>("ExtId7")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId7");

                    b.Property<string>("ExtId8")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId8");

                    b.Property<string>("ExtId9")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId9");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("MachineIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("MachineIdExt");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<long>("ObjectExtension")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectExtension");

                    b.Property<long>("ObjectSize")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectSize");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<string>("RawFileIdsString")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("RawFileIdsString");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("StorageObjectName")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectName");

                    b.Property<string>("StorageObjectUrl")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrl");

                    b.Property<string>("StorageObjectUrlPublic")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrlPublic");

                    b.Property<int>("StorageObjectVersion")
                        .HasColumnType("integer")
                        .HasColumnName("StorageObjectVersion");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("File", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileAuthorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileAuthorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("FileAuthorization_UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileAuthorization_UserGroupId");

                    b.HasIndex("FileId");

                    b.ToTable("FileAuthorization_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileAuthorization_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileAuthorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("FileAuthorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileAuthorization_UserId");

                    b.HasIndex("FileId");

                    b.ToTable("FileAuthorization_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileAuthorization_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileAuthorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("EditAll")
                        .HasColumnType("boolean")
                        .HasColumnName("EditAll");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("Hidden");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.Property<bool>("ViewAll")
                        .HasColumnType("boolean")
                        .HasColumnName("ViewAll");

                    b.HasKey("Id");

                    b.ToTable("FileMetadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataAuthorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataAuthorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("FileMetadataAuthorization_UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileMetadataAuthorization_UserGroupId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("FileMetadataAuthorization_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataAuthorization_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataAuthorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("FileMetadataAuthorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FileMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileMetadataAuthorization_UserId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("FileMetadataAuthorization_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataAuthorization_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataAuthorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("FileMetadataLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadataLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileMetadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("FileNotification_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("FileNotification_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileNotification_UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FileNotification_UserGroupId");

                    b.ToTable("FileNotification_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileNotification_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileNotification_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileNotification_UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FileNotification_UserId");

                    b.ToTable("FileNotification_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileNotification_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileNotification_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("File_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<long>("QrCodeType")
                        .HasColumnType("bigint")
                        .HasColumnName("QrCodeType");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.HasIndex("SubDirectoryId")
                        .IsUnique();

                    b.ToTable("QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<long>("QualityState")
                        .HasColumnType("bigint")
                        .HasColumnName("QualityState");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.HasIndex("SubDirectoryId")
                        .IsUnique();

                    b.ToTable("Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("FileQuality_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<int>("DirectoryObjectsAutofill")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<long>("DirectoryState")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectoryState");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryAuthorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryAuthorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("RootDirectoryAuthorization_UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryAuthorization_UserGroupId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectoryAuthorization_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryAuthorization_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("RootDirectoryAuthorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryAuthorization_UserId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectoryAuthorization_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryAuthorization_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("EditAll")
                        .HasColumnType("boolean")
                        .HasColumnName("EditAll");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("Hidden");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.Property<bool>("ViewAll")
                        .HasColumnType("boolean")
                        .HasColumnName("ViewAll");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataAuthorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataAuthorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("RootDirectoryMetadataAuthorization_UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryMetadataAuthorization_UserGroupId");

                    b.HasIndex("RootDirectoryMetadataId")
                        .HasDatabaseName("IX_RootDirectoryMetadataAuthorization_UserGroupLink_RootDirec~1");

                    b.ToTable("RootDirectoryMetadataAuthorization_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataAuthorization_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataAuthorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("RootDirectoryMetadataAuthorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryMetadataAuthorization_UserId");

                    b.HasIndex("RootDirectoryMetadataId")
                        .HasDatabaseName("IX_RootDirectoryMetadataAuthorization_UserLink_RootDirectoryM~1");

                    b.ToTable("RootDirectoryMetadataAuthorization_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataAuthorization_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataAuthorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("RootDirectoryMetadataId");

                    b.ToTable("RootDirectoryMetadataLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadataLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryMetadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryNotification_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryNotification_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootDirectoryNotification_UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("RootDirectoryNotification_UserGroupId");

                    b.ToTable("RootDirectoryNotification_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryNotification_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootDirectoryNotification_UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("RootDirectoryNotification_UserId");

                    b.ToTable("RootDirectoryNotification_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectoryNotification_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BackupIdsExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("BackupIdsExtString");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<int>("DirectoryObjectsAutofill")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<long>("DirectoryState")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectoryState");

                    b.Property<string>("JobIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExtString");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<Guid?>("ParentSubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIdsExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIdsExtString");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubDirectoryId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("SubDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryAuthorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryAuthorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("SubDirectoryAuthorization_UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryAuthorization_UserGroupId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectoryAuthorization_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryAuthorization_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("SubDirectoryAuthorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryAuthorization_UserId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectoryAuthorization_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryAuthorization_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserIdExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<bool>("EditAll")
                        .HasColumnType("boolean")
                        .HasColumnName("EditAll");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("Hidden");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<Guid>("ModifiedByUserIdExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserIdExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.Property<bool>("ViewAll")
                        .HasColumnType("boolean")
                        .HasColumnName("ViewAll");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataAuthorization_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataAuthorization_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("SubDirectoryMetadataAuthorization_UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryMetadataAuthorization_UserGroupId");

                    b.HasIndex("SubDirectoryMetadataId")
                        .HasDatabaseName("IX_SubDirectoryMetadataAuthorization_UserGroupLink_SubDirecto~1");

                    b.ToTable("SubDirectoryMetadataAuthorization_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataAuthorization_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataAuthorization_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("SubDirectoryMetadataAuthorization_UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryMetadataAuthorization_UserId");

                    b.HasIndex("SubDirectoryMetadataId")
                        .HasDatabaseName("IX_DbStorage_SubDirectoryMetadataAuthorization_UserLink_SubDi~1");

                    b.ToTable("DbStorage_SubDirectoryMetadataAuthorization_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataAuthorization_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataAuthorization_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubDirectoryMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.HasIndex("SubDirectoryMetadataId");

                    b.ToTable("SubDirectoryMetadataLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadataLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryMetadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryNotification_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("NotificationType");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<Guid>("UserGroupIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupIdExt");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryNotification_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserGroupLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubDirectoryNotification_UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.HasIndex("SubDirectoryNotification_UserGroupId");

                    b.ToTable("SubDirectoryNotification_UserGroupLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserGroupLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryNotification_UserGroupLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubDirectoryNotification_UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.HasIndex("SubDirectoryNotification_UserId");

                    b.ToTable("SubDirectoryNotification_UserLink", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserLink_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectoryNotification_UserLink_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareIdExt");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserIdExt")
                        .HasColumnType("uuid")
                        .HasColumnName("UserIdExt");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Files")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Files")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("RootDirectory");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroup", "FileAuthorization_UserGroup")
                        .WithMany("FileAuthorization_UserGroupLinks")
                        .HasForeignKey("FileAuthorization_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("FileId");

                    b.Navigation("File");

                    b.Navigation("FileAuthorization_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileAuthorization_User", "FileAuthorization_User")
                        .WithMany("FileAuthorization_UserLinks")
                        .HasForeignKey("FileAuthorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("FileId");

                    b.Navigation("File");

                    b.Navigation("FileAuthorization_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroup", "FileMetadataAuthorization_UserGroup")
                        .WithMany("FileMetadataAuthorization_UserGroupLinks")
                        .HasForeignKey("FileMetadataAuthorization_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileMetadata", "FileMetadata")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("FileMetadataId");

                    b.Navigation("FileMetadata");

                    b.Navigation("FileMetadataAuthorization_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_User", "FileMetadataAuthorization_User")
                        .WithMany("FileMetadataAuthorization_UserLinks")
                        .HasForeignKey("FileMetadataAuthorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileMetadata", "FileMetadata")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("FileMetadataId");

                    b.Navigation("FileMetadata");

                    b.Navigation("FileMetadataAuthorization_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileMetadata", "FileMetadata")
                        .WithMany("FileMetadataLinks")
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("Notification_UserGroupLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroup", "FileNotification_UserGroup")
                        .WithMany("FileNotification_UserGroupLinks")
                        .HasForeignKey("FileNotification_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("FileNotification_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("Notification_UserLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_FileNotification_User", "FileNotification_User")
                        .WithMany("FileNotification_UserLinks")
                        .HasForeignKey("FileNotification_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("FileNotification_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_QrCode", "FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_QrCode", "RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_QrCode", "SubDirectoryId");

                    b.Navigation("File");

                    b.Navigation("RootDirectory");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_Quality", "FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_Quality", "RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_Quality", "SubDirectoryId");

                    b.Navigation("File");

                    b.Navigation("RootDirectory");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserGroup", "RootDirectoryAuthorization_UserGroup")
                        .WithMany("RootDirectoryAuthorization_UserGroupLinks")
                        .HasForeignKey("RootDirectoryAuthorization_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("RootDirectory");

                    b.Navigation("RootDirectoryAuthorization_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_User", "RootDirectoryAuthorization_User")
                        .WithMany("RootDirectoryAuthorization_UserLinks")
                        .HasForeignKey("RootDirectoryAuthorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("RootDirectory");

                    b.Navigation("RootDirectoryAuthorization_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroup", "RootDirectoryMetadataAuthorization_UserGroup")
                        .WithMany("RootDirectoryMetadataAuthorization_UserGroupLinks")
                        .HasForeignKey("RootDirectoryMetadataAuthorization_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", "RootDirectoryMetadata")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("RootDirectoryMetadataId")
                        .HasConstraintName("FK_RootDirectoryMetadataAuthorization_UserGroupLink_RootDirec~1");

                    b.Navigation("RootDirectoryMetadata");

                    b.Navigation("RootDirectoryMetadataAuthorization_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_User", "RootDirectoryMetadataAuthorization_User")
                        .WithMany("RootDirectoryMetadataAuthorization_UserLinks")
                        .HasForeignKey("RootDirectoryMetadataAuthorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", "RootDirectoryMetadata")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("RootDirectoryMetadataId")
                        .HasConstraintName("FK_RootDirectoryMetadataAuthorization_UserLink_RootDirectoryM~1");

                    b.Navigation("RootDirectoryMetadata");

                    b.Navigation("RootDirectoryMetadataAuthorization_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", "RootDirectoryMetadata")
                        .WithMany("RootDirectoryMetadataLinks")
                        .HasForeignKey("RootDirectoryMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootDirectory");

                    b.Navigation("RootDirectoryMetadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Notification_UserGroupLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserGroup", "RootDirectoryNotification_UserGroup")
                        .WithMany("RootDirectoryNotification_UserGroupLinks")
                        .HasForeignKey("RootDirectoryNotification_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootDirectory");

                    b.Navigation("RootDirectoryNotification_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Notification_UserLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_User", "RootDirectoryNotification_User")
                        .WithMany("RootDirectoryNotification_UserLinks")
                        .HasForeignKey("RootDirectoryNotification_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootDirectory");

                    b.Navigation("RootDirectoryNotification_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "ParentSubDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("ParentSubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("ParentSubDirectory");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserGroup", "SubDirectoryAuthorization_UserGroup")
                        .WithMany("SubDirectoryAuthorization_UserGroupLinks")
                        .HasForeignKey("SubDirectoryAuthorization_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("SubDirectory");

                    b.Navigation("SubDirectoryAuthorization_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_User", "SubDirectoryAuthorization_User")
                        .WithMany("SubDirectoryAuthorization_UserLinks")
                        .HasForeignKey("SubDirectoryAuthorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("SubDirectory");

                    b.Navigation("SubDirectoryAuthorization_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroup", "SubDirectoryMetadataAuthorization_UserGroup")
                        .WithMany("SubDirectoryMetadataAuthorization_UserGroupLinks")
                        .HasForeignKey("SubDirectoryMetadataAuthorization_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", "SubDirectoryMetadata")
                        .WithMany("Authorization_UserGroupLinks")
                        .HasForeignKey("SubDirectoryMetadataId")
                        .HasConstraintName("FK_SubDirectoryMetadataAuthorization_UserGroupLink_SubDirecto~1");

                    b.Navigation("SubDirectoryMetadata");

                    b.Navigation("SubDirectoryMetadataAuthorization_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_User", "SubDirectoryMetadataAuthorization_User")
                        .WithMany("SubDirectoryMetadataAuthorization_UserLinks")
                        .HasForeignKey("SubDirectoryMetadataAuthorization_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", "SubDirectoryMetadata")
                        .WithMany("Authorization_UserLinks")
                        .HasForeignKey("SubDirectoryMetadataId")
                        .HasConstraintName("FK_DbStorage_SubDirectoryMetadataAuthorization_UserLink_SubDi~1");

                    b.Navigation("SubDirectoryMetadata");

                    b.Navigation("SubDirectoryMetadataAuthorization_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", "SubDirectoryMetadata")
                        .WithMany("SubDirectoryMetadataLinks")
                        .HasForeignKey("SubDirectoryMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDirectory");

                    b.Navigation("SubDirectoryMetadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserGroupLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Notification_UserGroupLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserGroup", "SubDirectoryNotification_UserGroup")
                        .WithMany("SubDirectoryNotification_UserGroupLinks")
                        .HasForeignKey("SubDirectoryNotification_UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDirectory");

                    b.Navigation("SubDirectoryNotification_UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserLink", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Notification_UserLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_User", "SubDirectoryNotification_User")
                        .WithMany("SubDirectoryNotification_UserLinks")
                        .HasForeignKey("SubDirectoryNotification_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDirectory");

                    b.Navigation("SubDirectoryNotification_User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("MetadataLinks");

                    b.Navigation("Notification_UserGroupLinks");

                    b.Navigation("Notification_UserLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_User", b =>
                {
                    b.Navigation("FileAuthorization_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileAuthorization_UserGroup", b =>
                {
                    b.Navigation("FileAuthorization_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadata", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("FileMetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_User", b =>
                {
                    b.Navigation("FileMetadataAuthorization_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileMetadataAuthorization_UserGroup", b =>
                {
                    b.Navigation("FileMetadataAuthorization_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_User", b =>
                {
                    b.Navigation("FileNotification_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_FileNotification_UserGroup", b =>
                {
                    b.Navigation("FileNotification_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("Files");

                    b.Navigation("MetadataLinks");

                    b.Navigation("Notification_UserGroupLinks");

                    b.Navigation("Notification_UserLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("SubDirectories");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_User", b =>
                {
                    b.Navigation("RootDirectoryAuthorization_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryAuthorization_UserGroup", b =>
                {
                    b.Navigation("RootDirectoryAuthorization_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadata", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("RootDirectoryMetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_User", b =>
                {
                    b.Navigation("RootDirectoryMetadataAuthorization_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryMetadataAuthorization_UserGroup", b =>
                {
                    b.Navigation("RootDirectoryMetadataAuthorization_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_User", b =>
                {
                    b.Navigation("RootDirectoryNotification_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectoryNotification_UserGroup", b =>
                {
                    b.Navigation("RootDirectoryNotification_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("Files");

                    b.Navigation("MetadataLinks");

                    b.Navigation("Notification_UserGroupLinks");

                    b.Navigation("Notification_UserLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("SubDirectories");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_User", b =>
                {
                    b.Navigation("SubDirectoryAuthorization_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryAuthorization_UserGroup", b =>
                {
                    b.Navigation("SubDirectoryAuthorization_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadata", b =>
                {
                    b.Navigation("Authorization_UserGroupLinks");

                    b.Navigation("Authorization_UserLinks");

                    b.Navigation("SubDirectoryMetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_User", b =>
                {
                    b.Navigation("SubDirectoryMetadataAuthorization_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryMetadataAuthorization_UserGroup", b =>
                {
                    b.Navigation("SubDirectoryMetadataAuthorization_UserGroupLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_User", b =>
                {
                    b.Navigation("SubDirectoryNotification_UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectoryNotification_UserGroup", b =>
                {
                    b.Navigation("SubDirectoryNotification_UserGroupLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
