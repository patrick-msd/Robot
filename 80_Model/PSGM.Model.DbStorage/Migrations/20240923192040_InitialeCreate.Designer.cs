// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSGM.Model.DbStorage;

#nullable disable

namespace PSGM.Model.DbStorage.Migrations
{
    [DbContext(typeof(DbStorage_Context))]
    [Migration("20240923192040_InitialeCreate")]
    partial class InitialeCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("psgm")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ArchiveIds_ExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("ArchiveIds_ExtString");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<Guid>("DeviceId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("DeviceId_Ext");

                    b.Property<string>("ExtId1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId1");

                    b.Property<string>("ExtId10")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId10");

                    b.Property<string>("ExtId2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId2");

                    b.Property<string>("ExtId3")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId3");

                    b.Property<string>("ExtId4")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId4");

                    b.Property<string>("ExtId5")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId5");

                    b.Property<string>("ExtId6")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId6");

                    b.Property<string>("ExtId7")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId7");

                    b.Property<string>("ExtId8")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId8");

                    b.Property<string>("ExtId9")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ExtId9");

                    b.Property<string>("JobIdsExt_String")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExt_String");

                    b.Property<Guid>("MachineId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("MachineId_Ext");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("ObjectExtension")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectExtension");

                    b.Property<long>("ObjectSize")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectSize");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<string>("RawFileIdsString")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("RawFileIdsString");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("StorageObjectName")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectName");

                    b.Property<string>("StorageObjectUrl")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrl");

                    b.Property<string>("StorageObjectUrlPublic")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("StorageObjectUrlPublic");

                    b.Property<int>("StorageObjectVersion")
                        .HasColumnType("integer")
                        .HasColumnName("StorageObjectVersion");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIds_ExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIds_ExtString");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("File", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("ApplicableForFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("ApplicableForFiles");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<int>("MetadataPermissions")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataPermissions");

                    b.Property<int>("MetadataType")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataType");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MetadataId");

                    b.ToTable("File_Metadata_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_Metadata_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("QrCodeType")
                        .HasColumnType("integer")
                        .HasColumnName("QrCodeType");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("File_QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("QualityState")
                        .HasColumnType("integer")
                        .HasColumnName("QualityState");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("File_Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_Quality_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("File_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("File_UserGroup_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Notification_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup_Notification_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("File_UserGroup_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Permission_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("file_UserGroup_Permission_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("File_UserGroup_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_UserGroup_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("File_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("File_User_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Notification_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_User_Notification_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("File_User_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Permission_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("file_User_Permission_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("VirtualUnitId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("VirtualUnitId_Ext");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("File_VirtualUnit", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_VirtualUnit_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_VirtualUnit_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.HasKey("Id");

                    b.ToTable("File_VirtualUnit_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VirtualUnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("VirtualUnitId");

                    b.ToTable("File_VirtualUnit_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("File_VirtualUnit_UserGroup_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("File_VirtualUnit_UserGroup_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("File_VirtualUnit_UserGroup_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("File_VirtualUnit_UserGroup_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("File_VirtualUnit_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("File_VirtualUnit_User_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("File_VirtualUnit_User_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ArchiveIds_ExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("ArchiveIds_ExtString");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<int>("DirectoryObjectsAutofill")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<int>("DirectoryState")
                        .HasColumnType("integer")
                        .HasColumnName("DirectoryState");

                    b.Property<string>("JobIdsExt_String")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExt_String");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIds_ExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIds_ExtString");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("ApplicableForFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("ApplicableForFiles");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<int>("MetadataPermissions")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataPermissions");

                    b.Property<int>("MetadataType")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataType");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_Metadata_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Metadata_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("QrCodeType")
                        .HasColumnType("integer")
                        .HasColumnName("QrCodeType");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.ToTable("RootDirectory_QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("QualityState")
                        .HasColumnType("integer")
                        .HasColumnName("QualityState");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId")
                        .IsUnique();

                    b.ToTable("RootDirectory_Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_Quality_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("RootDirectory_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("RootDirectory_UserGroup_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Notification_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_Notification_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("RootDirectory_UserGroup_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Permission_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_Permission_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("RootDirectory_UserGroup_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_UserGroup_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.HasIndex("UserId");

                    b.ToTable("RootDirectory_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RootDirectory_User_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Notification_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_User_Notification_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RootDirectory_User_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Permission_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_User_Permission_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VirtualUnitId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("VirtualUnitId_Ext");

                    b.HasKey("Id");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("RootDirectory_VirtualUnit", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_VirtualUnit_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_VirtualUnit_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_VirtualUnit_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("RootDirectory_VirtualUnit_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("RootDirectory_VirtualUnit_UserGroup_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("RootDirectory_VirtualUnit_UserGroup_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("RootDirectory_VirtualUnit_UserGroup_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("RootDirectory_VirtualUnit_UserGroup_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("RootDirectory_VirtualUnit_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RootDirectory_VirtualUnit_User_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RootDirectory_VirtualUnit_User_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ArchiveIds_ExtString")
                        .IsRequired()
                        .HasMaxLength(32766)
                        .HasColumnType("character varying(32766)")
                        .HasColumnName("ArchiveIds_ExtString");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("DescriptionProjectOwner")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("DescriptionProjectOwner");

                    b.Property<bool>("DirectoryLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("DirectoryLocked");

                    b.Property<int>("DirectoryObjectsAutofill")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsAutofill");

                    b.Property<long>("DirectorySizeAutofill")
                        .HasColumnType("bigint")
                        .HasColumnName("DirectorySizeAutofill");

                    b.Property<int>("DirectoryState")
                        .HasColumnType("integer")
                        .HasColumnName("DirectoryState");

                    b.Property<string>("JobIdsExt_String")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("JobIdsExt_String");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("NameProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("NameProjectOwner");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<Guid?>("ParentSubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Prefix");

                    b.Property<string>("PrefixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("PrefixProjectOwner");

                    b.Property<Guid?>("RootDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Suffix");

                    b.Property<string>("SuffixProjectOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SuffixProjectOwner");

                    b.Property<string>("WorkflowItemIds_ExtString")
                        .IsRequired()
                        .HasMaxLength(65532)
                        .HasColumnType("character varying(65532)")
                        .HasColumnName("WorkflowItemIds_ExtString");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubDirectoryId");

                    b.HasIndex("RootDirectoryId");

                    b.ToTable("SubDirectory", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("ApplicableForFiles")
                        .HasColumnType("boolean")
                        .HasColumnName("ApplicableForFiles");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("Key");

                    b.Property<int>("MetadataPermissions")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataPermissions");

                    b.Property<int>("MetadataType")
                        .HasColumnType("integer")
                        .HasColumnName("MetadataType");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_Metadata_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_Metadata_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("QrCodeType")
                        .HasColumnType("integer")
                        .HasColumnName("QrCodeType");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId")
                        .IsUnique();

                    b.ToTable("SubDirectory_QrCode", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_QrCode_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8191)
                        .HasColumnType("character varying(8191)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("QualityState")
                        .HasColumnType("integer")
                        .HasColumnName("QualityState");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId")
                        .IsUnique();

                    b.ToTable("SubDirectory_Quality", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_QualityAuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("SubDirectory_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("SubDirectory_UserGroup_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Notification_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_Notification_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("SubDirectory_UserGroup_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Permission_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_Permission_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("SubDirectory_UserGroup_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_UserGroup_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_User_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SubDirectory_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Link_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_User_Link_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SubDirectory_User_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Notification_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_User_Notification_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SubDirectory_User_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Permission_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_User_Permission_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid?>("SubDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VirtualUnitId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("VirtualUnitId_Ext");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectoryId");

                    b.ToTable("SubDirectory_VirtualUnit", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_VirtualUnit_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_VirtualUnit_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_VirtualUnit_UserGroup", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("SubDirectory_VirtualUnit_UserGroup_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("SubDirectory_VirtualUnit_UserGroup_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId")
                        .IsUnique();

                    b.ToTable("SubDirectory_VirtualUnit_UserGroup_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Acronym");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DaytimePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("DaytimePhoneNumber");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)")
                        .HasColumnName("EMail");

                    b.Property<string>("EveningPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("EveningPhoneNumber");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("SubDirectory_VirtualUnit_UserGroup_User", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("SubDirectory_VirtualUnit_UserGroup_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("SubDirectory_VirtualUnit_User_Link", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<bool>("EMail")
                        .HasColumnType("boolean")
                        .HasColumnName("EMail");

                    b.Property<bool>("Gotify")
                        .HasColumnType("boolean")
                        .HasColumnName("Gotify");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<bool>("SMS")
                        .HasColumnType("boolean")
                        .HasColumnName("SMS");

                    b.Property<bool>("Slack")
                        .HasColumnType("boolean")
                        .HasColumnName("Slack");

                    b.Property<bool>("Teams")
                        .HasColumnType("boolean")
                        .HasColumnName("Teams");

                    b.Property<bool>("Telegram")
                        .HasColumnType("boolean")
                        .HasColumnName("Telegram");

                    b.Property<int>("TriggerState")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerState");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("TriggerType");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("boolean")
                        .HasColumnName("WhatsApp");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SubDirectory_VirtualUnit_User_Notification", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(16384)
                        .HasColumnType("character varying(16384)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<int>("PermissionFile")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionFile");

                    b.Property<int>("PermissionMetadata")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionMetadata");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SubDirectory_VirtualUnit_User_Permission", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("Files")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("Files")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("RootDirectory");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_Metadata", "Metadata")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_QrCode", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_Quality", "FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_UserGroup", "UserGroup")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("File");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_UserGroup", "UserGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_UserGroup", "UserGroup")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_UserGroup_Permission", "UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_UserGroup", "UserGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("UserLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId");

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_User_Permission", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File", "File")
                        .WithMany("VirtualUnits")
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit", "VirtualUnit")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("VirtualUnitId");

                    b.Navigation("UserGroup");

                    b.Navigation("VirtualUnit");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup", "UserGroup")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_Permission", "UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_File_VirtualUnit_UserGroup_User_Link_File_VirtualSubUni~1");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit", "VirtualUnit")
                        .WithMany("UserLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("VirtualUnit");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User_Permission", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", "Metadata")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("Metadata");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_QrCode", "RootDirectoryId");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_Quality", "RootDirectoryId");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup", "UserGroup")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("RootDirectory");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup", "UserGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup", "UserGroup")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_Permission", "UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup", "UserGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RootDirectory_UserGroup_User_Link_RootDirectory_UserGroup_~1");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("UserLinks")
                        .HasForeignKey("RootDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId");

                    b.Navigation("RootDirectory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_User_Permission", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("VirtualUnits")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit", "VirtualUnit")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK_RootDirectory_VirtualUnit_UserGroup_Link_RootDirectory~1");

                    b.Navigation("UserGroup");

                    b.Navigation("VirtualUnit");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_Permission", "UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RootDirectory_VirtualUnit_UserGroup_User_Link_RootDire~1");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit", "VirtualUnit")
                        .WithMany("UserLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RootDirectory_VirtualUnit_User_Link_RootDirectory_Virt~1");

                    b.Navigation("User");

                    b.Navigation("VirtualUnit");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User_Permission", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "ParentSubDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("ParentSubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_RootDirectory", "RootDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("RootDirectoryId");

                    b.Navigation("ParentSubDirectory");

                    b.Navigation("RootDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", "Metadata")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("MetadataLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("Metadata");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithOne("QrCode")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_QrCode", "SubDirectoryId");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithOne("Quality")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_Quality", "SubDirectoryId");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup", "UserGroup")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("SubDirectory");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup", "UserGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup", "UserGroup")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_Permission", "UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup", "UserGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubDirectory_UserGroup_User_Link_SubDirectory_UserGroup_Us~1");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("UserLinks")
                        .HasForeignKey("SubDirectoryId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId");

                    b.Navigation("SubDirectory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_User_Permission", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory", "SubDirectory")
                        .WithMany("VirtualUnits")
                        .HasForeignKey("SubDirectoryId");

                    b.Navigation("SubDirectory");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit", "VirtualUnit")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("UserGroupLinks")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK_SubDirectory_VirtualUnit_UserGroup_Link_SubDirectory_Vi~1");

                    b.Navigation("UserGroup");

                    b.Navigation("VirtualUnit");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_Permission", "UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup", "UserGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubDirectory_VirtualUnit_UserGroup_User_Link_SubDirecto~1");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Link", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit", "VirtualUnit")
                        .WithMany("UserLinks")
                        .HasForeignKey("FileId");

                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SubDirectory_VirtualUnit_User_Link_SubDirectory_Virtual~1");

                    b.Navigation("User");

                    b.Navigation("VirtualUnit");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Notification", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Permission", b =>
                {
                    b.HasOne("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User", "User")
                        .WithOne("Permissions")
                        .HasForeignKey("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User_Permission", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File", b =>
                {
                    b.Navigation("MetadataLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");

                    b.Navigation("VirtualUnits");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_Metadata", b =>
                {
                    b.Navigation("MetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_UserGroup_User", b =>
                {
                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit", b =>
                {
                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_File_VirtualUnit_UserGroup_User", b =>
                {
                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("MetadataLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("SubDirectories");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");

                    b.Navigation("VirtualUnits");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_Metadata", b =>
                {
                    b.Navigation("MetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_UserGroup_User", b =>
                {
                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit", b =>
                {
                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_RootDirectory_VirtualUnit_UserGroup_User", b =>
                {
                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("MetadataLinks");

                    b.Navigation("QrCode");

                    b.Navigation("Quality");

                    b.Navigation("SubDirectories");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");

                    b.Navigation("VirtualUnits");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_Metadata", b =>
                {
                    b.Navigation("MetadataLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_UserGroup_User", b =>
                {
                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit", b =>
                {
                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("UserGroupLinks");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("PSGM.Model.DbStorage.DbStorage_SubDirectory_VirtualUnit_UserGroup_User", b =>
                {
                    b.Navigation("UserLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
