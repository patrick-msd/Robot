// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSGM.Model.DbBackend;

#nullable disable

namespace PSGM.Model.DbBackend.Migrations
{
    [DbContext(typeof(DbBackend_Context))]
    [Migration("20240925202618_InitialeCreate")]
    partial class InitialeCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("psgm")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Backend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("BackendType")
                        .HasColumnType("integer")
                        .HasColumnName("BackendType");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("Description");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("Locked");

                    b.Property<string>("LockedDescription")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("LockedDescription");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ReadOnlyMode")
                        .HasColumnType("boolean")
                        .HasColumnName("ReadOnlyMode");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("Url");

                    b.Property<string>("UrlPublic")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("UrlPublic");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Backend", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Backend_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Backend_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("BackendId")
                        .HasColumnType("uuid");

                    b.Property<int>("BranchNumber")
                        .HasColumnType("integer")
                        .HasColumnName("BranchNumber");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DatabaseFilePath")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("DatabaseFilePath");

                    b.Property<string>("DatabasePassword")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("DatabasePassword");

                    b.Property<int>("DatabasePort")
                        .HasColumnType("integer")
                        .HasColumnName("DatabasePort");

                    b.Property<int>("DatabaseType")
                        .HasColumnType("integer")
                        .HasColumnName("DatabaseType");

                    b.Property<string>("DatabaseUsername")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("DatabaseUsername");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("Description");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Domain");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("Locked");

                    b.Property<string>("LockedDescription")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("LockedDescription");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<bool>("ReadOnlyMode")
                        .HasColumnType("boolean")
                        .HasColumnName("ReadOnlyMode");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("Url");

                    b.Property<string>("UrlPublic")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("UrlPublic");

                    b.HasKey("Id");

                    b.HasIndex("BackendId");

                    b.ToTable("Database_Cluster", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Cluster_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Database_Cluster_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("Description");

                    b.Property<int>("FirstIpSegment")
                        .HasColumnType("integer")
                        .HasColumnName("FirstIpSegment");

                    b.Property<int>("LastIpSegment")
                        .HasColumnType("integer")
                        .HasColumnName("LastIpSegment");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("Locked");

                    b.Property<string>("LockedDescription")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("LockedDescription");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<bool>("ReadOnlyMode")
                        .HasColumnType("boolean")
                        .HasColumnName("ReadOnlyMode");

                    b.Property<int>("VLAN")
                        .HasColumnType("integer")
                        .HasColumnName("VLAN");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Database_Server", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Server_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Database_Server_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<Guid>("ProjectId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("ProjectId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Project", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Project_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Project_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("BackendId")
                        .HasColumnType("uuid");

                    b.Property<int>("BranchNumber")
                        .HasColumnType("integer")
                        .HasColumnName("BranchNumber");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("DatabaseFilePath")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("DatabaseFilePath");

                    b.Property<string>("DatabasePassword")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("DatabasePassword");

                    b.Property<int>("DatabasePort")
                        .HasColumnType("integer")
                        .HasColumnName("DatabasePort");

                    b.Property<int>("DatabaseType")
                        .HasColumnType("integer")
                        .HasColumnName("DatabaseType");

                    b.Property<string>("DatabaseUsername")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("DatabaseUsername");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("Description");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Domain");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("Locked");

                    b.Property<string>("LockedDescription")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("LockedDescription");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<bool>("ReadOnlyMode")
                        .HasColumnType("boolean")
                        .HasColumnName("ReadOnlyMode");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("Stars");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("Url");

                    b.Property<string>("UrlPublic")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("UrlPublic");

                    b.HasKey("Id");

                    b.HasIndex("BackendId");

                    b.ToTable("Storage_Cluster", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Cluster_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Storage_Cluster_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId_ExtAutoFill");

                    b.Property<DateTime>("CreatedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTimeAutoFill");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("Description");

                    b.Property<int>("FirstIpSegment")
                        .HasColumnType("integer")
                        .HasColumnName("FirstIpSegment");

                    b.Property<int>("LastIpSegment")
                        .HasColumnType("integer")
                        .HasColumnName("LastIpSegment");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("Locked");

                    b.Property<string>("LockedDescription")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)")
                        .HasColumnName("LockedDescription");

                    b.Property<Guid>("ModifiedByUserId_ExtAutoFill")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByUserId_ExtAutoFill");

                    b.Property<DateTime>("ModifiedDateTimeAutoFill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ModifiedDateTimeAutoFill");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<bool>("ReadOnlyMode")
                        .HasColumnType("boolean")
                        .HasColumnName("ReadOnlyMode");

                    b.Property<int>("VLAN")
                        .HasColumnType("integer")
                        .HasColumnName("VLAN");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Storage_Server", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Server_AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasMaxLength(16383)
                        .HasColumnType("character varying(16383)")
                        .HasColumnName("Changes");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<Guid>("SoftwareId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("SoftwareId_Ext");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceId");

                    b.Property<Guid>("UserId_Ext")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId_Ext");

                    b.HasKey("Id");

                    b.ToTable("Storage_Server_AuditLog", "psgm");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Backend", b =>
                {
                    b.HasOne("PSGM.Model.DbBackend.DbBackend_Project", "Project")
                        .WithMany("Backends")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Cluster", b =>
                {
                    b.HasOne("PSGM.Model.DbBackend.DbBackend_Backend", "Backend")
                        .WithMany("DatabaseClusters")
                        .HasForeignKey("BackendId");

                    b.Navigation("Backend");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Server", b =>
                {
                    b.HasOne("PSGM.Model.DbBackend.DbBackend_Database_Cluster", "Cluster")
                        .WithMany("DatabaseServers")
                        .HasForeignKey("ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Cluster", b =>
                {
                    b.HasOne("PSGM.Model.DbBackend.DbBackend_Backend", "Backend")
                        .WithMany("StorageClusters")
                        .HasForeignKey("BackendId");

                    b.Navigation("Backend");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Server", b =>
                {
                    b.HasOne("PSGM.Model.DbBackend.DbBackend_Storage_Cluster", "Cluster")
                        .WithMany("StorageServers")
                        .HasForeignKey("ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Backend", b =>
                {
                    b.Navigation("DatabaseClusters");

                    b.Navigation("StorageClusters");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Database_Cluster", b =>
                {
                    b.Navigation("DatabaseServers");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Project", b =>
                {
                    b.Navigation("Backends");
                });

            modelBuilder.Entity("PSGM.Model.DbBackend.DbBackend_Storage_Cluster", b =>
                {
                    b.Navigation("StorageServers");
                });
#pragma warning restore 612, 618
        }
    }
}
