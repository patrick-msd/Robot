//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace  Nlc {

public class SamplerInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SamplerInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SamplerInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SamplerInterface() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NanolibPINVOKE.delete_SamplerInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual ResultVoid configure( Nlc.DeviceHandle  deviceHandle, SamplerConfiguration samplerConfiguration) {
    ResultVoid ret = new ResultVoid(NanolibPINVOKE.SamplerInterface_configure(swigCPtr,  deviceHandle , SamplerConfiguration.getCPtr(samplerConfiguration)), true);
    if (NanolibPINVOKE.SWIGPendingException.Pending) throw NanolibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ResultVoid start( Nlc.DeviceHandle  deviceHandle, SamplerNotify samplerNotify, long applicationData) {
    ResultVoid ret = new ResultVoid(NanolibPINVOKE.SamplerInterface_start(swigCPtr,  deviceHandle , SamplerNotify.getCPtr(samplerNotify), applicationData), true);
    return ret;
  }

  public virtual ResultSampleDataArray getData( Nlc.DeviceHandle  deviceHandle) {
    ResultSampleDataArray ret = new ResultSampleDataArray(NanolibPINVOKE.SamplerInterface_getData(swigCPtr,  deviceHandle ), true);
    return ret;
  }

  public virtual ResultVoid stop( Nlc.DeviceHandle  deviceHandle) {
    ResultVoid ret = new ResultVoid(NanolibPINVOKE.SamplerInterface_stop(swigCPtr,  deviceHandle ), true);
    return ret;
  }

  public virtual ResultSamplerState getState( Nlc.DeviceHandle  deviceHandle) {
    ResultSamplerState ret = new ResultSamplerState(NanolibPINVOKE.SamplerInterface_getState(swigCPtr,  deviceHandle ), true);
    return ret;
  }

  public virtual ResultVoid getLastError( Nlc.DeviceHandle  deviceHandle) {
    ResultVoid ret = new ResultVoid(NanolibPINVOKE.SamplerInterface_getLastError(swigCPtr,  deviceHandle ), true);
    return ret;
  }

}

}
